@mixin define-color($name, $color, $color-text: '') {
  --bce-color-#{$name}-l: #{lighten($color, 10%)};
  --bce-color-#{$name}-n: #{$color};
  --bce-color-#{$name}-d: #{darken($color, 10%)};

  @if $color-text != '' {
    --bce-color-#{$name}-t: #{$color-text};
  }
}

@mixin bce-color($name, $colors: primary secondary tertiary) {
  // Use the first color as base color
  @include bce-color-section($name, nth($colors, 1));

  // A little sass magic to loop through the list in reverse order, this is
  // necessary because polyfills in IE don't allow dynamic use of sass variables
  // and will always revert to showing the last color defined. When looping in
  // reverse order the first color will end being the fallback color.
  @for $i from length($colors) * -1 through -1 {
    $color: nth($colors, abs($i));

    &[color='#{$color}'] {
      @include bce-color-section($name, $color);
    }
  }
}

@mixin bce-color-section($name, $color) {
  --bce-color-#{$name}-l: #{bce-color($color, 'l')};
  --bce-color-#{$name}-n: #{bce-color($color, 'n')};
  --bce-color-#{$name}-d: #{bce-color($color, 'd')};
  --bce-color-#{$name}-t: #{bce-color($color, 't')};
}

@function bce-color($name, $modifier: 'n') {
  @return unquote('var(--bce-color-#{$name}-#{$modifier})');
}

@function bce-color-t($name) {
  @return bce-color($name, 't');
}

@function bce-color-l($name) {
  @return bce-color($name, 'l');
}

@function bce-color-d($name) {
  @return bce-color($name, 'd');
}
